doctype html
html
  head
    meta(charset='utf-8')
    link(rel='stylesheet', href='../css/bootstrap.min.css')
    link(rel='stylesheet', href='../css/v4.css')
    script(src='../js/jquery.min.js')
    script(src='../js/bootstrap.min.js')
    title S T E V I A | History
    link(rel='stylesheet', href='../css/v4gray.css')
    style.
      @media(max-width: 768px) {
        #map {
          margin-top: -100px;
        }
      }

      @media(min-width: 768px) {
        .content {
          margin-top: -300px;
        }
      }

      body {
        font-family: "avenir next", Arial, sans-serif;
        font-size: 12px;
        color: #696969;
      }

      //- #play-button {
      //-   position: relative;
      //-   top: 140px;
      //-   left: 50px;
      //-   background: #f08080;
      //-   padding-right: 26px;
      //-   border-radius: 3px;
      //-   border: none;
      //-   color: white;
      //-   margin: 0;
      //-   padding: 0 12px;
      //-   width: 60px;
      //-   cursor: pointer;
      //-   height: 30px;
      //- }

      .ticks {
        font-size: 10px;
      }

      .track,
      .track-inset,
      .track-overlay {
        stroke-linecap: round;
      }

      .track {
        stroke: #000;
        stroke-opacity: 0.3;
        stroke-width: 10px;
      }

      .track-inset {
        stroke: #dcdcdc;
        stroke-width: 8px;
      }

      .track-overlay {
        pointer-events: stroke;
        stroke-width: 50px;
        stroke: transparent;
        cursor: crosshair;
      }

      .handle {
        fill: #fff;
        stroke: #000;
        stroke-opacity: 0.5;
        stroke-width: 1.25px;
      }
  body
    .header
    .content
      .container-fluid.pl-0.pr-0
        #map
        .fixed-top
          #vis.row.justify-content-center
            .d-flex.align-items-center
              button#play-button.btn.btn-primary.mr-3(disabled) Loading..
        .fixed-bottom
          .d-flex.justify-content-start
            .col-8
              table.table.table-sm.table-dark
                thead
                  tr
                    th Source
                    th Destination
                    th Alert
                    th Frequency
                tbody.table-borderless#stats
                  tr
                    td.text-center(colspan="3") No Data Available
        
    .footer
    
    script(src='/socket.io/socket.io.js')
    script(src='../js/d3.min.js')
    script(src='../js/topojson.v1.min.js')
    script(src='../js/moment.min.js')
    script.
      var useDummy = false;

      var currentWidth = $('#map').width();
      var width = 938;
      var height = 620;

      var projection = d3.geoMercator()
                        .scale(150)
                        .translate([width / 2, height / 1.41]);

      var path = d3.geoPath()
                  .pointRadius(2)
                  .projection(projection);

      //ref: https://stackoverflow.com/a/56568406
      var curve = function(context) {
        var custom = d3.curveLinear(context);
        custom._context = context;
        custom.point = function(x,y) {
          x = +x, y = +y;
          switch (this._point) {
            case 0: this._point = 1; 
              this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
              this.x0 = x; this.y0 = y;        
              break;
            case 1: this._point = 2;
            default: 
              var x1 = this.x0 * 0.5 + x * 0.5;
              var y1 = this.y0 * 0.5 + y * 0.5;
              var m = 1/(y1 - y)/(x1 - x);
              var r = -100; // offset of mid point.
              var k = r / Math.sqrt(1 + (m*m) );
              if (m == Infinity) {
                y1 += r;
              }
              else {
                y1 += k;
                x1 += m*k;
              }     
              this._context.quadraticCurveTo(x1,y1,x,y); 
              this.x0 = x; this.y0 = y;        
              break;
          }
        }
        return custom;
      }

      var line = d3.line()
                  .x(function(d) {
                    return projection([d[0],d[1]])[0];
                  })
                  .y(function(d) {
                    return projection([d[0],d[1]])[1];
                  })
                  .curve(curve); 

      var svg = d3.select("#map")
                  .append("svg")
                  .attr("preserveAspectRatio", "xMidYMid")
                  .attr("viewBox", "0 0 " + width + " " + height)
                  .attr("width", currentWidth)
                  .attr("height", currentWidth * height / width);

      if(useDummy){
        var capitalCities = [];
      } else {
        var capitalCities = {};
      }

      function delta(plane, path) {
        let l = path.getTotalLength();
        //let plane = plane;
        return function(i) {
          return function(t) {
            let p = path.getPointAtLength(t * l);

            let t2 = Math.min(t + 0.05, 1);
            let p2 = path.getPointAtLength(t2 * l);

            let x = p2.x - p.x;
            let y = p2.y - p.y;
            let r = 90 - Math.atan2(-y, x) * 180 / Math.PI;

            let s = Math.min(Math.sin(Math.PI * t) * 0.7, 0.3);

            return "translate(" + p.x + "," + p.y + ") scale(" + s + ") rotate(" + r + ")";
          }
        }
      }

      function trailDelta() {
        let l = this.getTotalLength(),
            i = d3.interpolateString("0," + l, l + "," + l);
        return function(t) { return i(t); };
      }

      function transition(route, trail, color) {
        let l = route.node().getTotalLength();
        let duration = l*5;
            
        trail.transition()
            .duration(duration)
            .attrTween("stroke-dasharray", trailDelta)
            .on("end", destinationPulse(route, duration, color))
            .remove();     
      }

      function destinationPulse(route, delayDuration, color){
        let dataCircle = route.datum();
        let pointDestination = projection(dataCircle[1]);
          
        svg.append("circle")
          .datum(dataCircle)
          .attr("cx", pointDestination[0])
          .attr("cy", pointDestination[1])
          .attr("r", 2)
          .style("class", "destCircleMouse")
          .style("fill", color)
          .style("fill-opacity", "1")
          .transition()
          .delay(delayDuration)
          .duration(100)
          .attr("r", 3)
          .on("end", function (d) {
            d3.select(this)
              .transition()
              .duration(500)
              .attr("r", 10) // circle radius end
              .style("fill-opacity", "0")
              .on("end", function() { 
                this.remove(); 
              })
          });

          route.remove();
      }
        
      var defaultCity = "Indonesia";

      function fly(origin, destination, color) {
        if(!capitalCities[origin])
          origin = defaultCity;
        if(!capitalCities[destination])
          destination = defaultCity;

        //ref: https://stackoverflow.com/a/56568406
        let route = svg.append("path")
                      .datum([capitalCities[origin], capitalCities[destination]])
                      .attr("class", "route")
                      .attr("d", line);
          
        let trail = svg.append("path")
                      .datum([capitalCities[origin], capitalCities[destination]])
                      .attr("class", "trail")
                      .attr("d", line)
                      .style("stroke-width", 1.5)
                      .style("stroke", color);               

        transition(route, trail, color);
      }

      let colorAttack = {
        "Consecutive TCP small segments exceeding threshold": "Turquoise",
        "Reset outside window": "Blue",
        "(spp_ssh) Protocol mismatch": "Green",
        "(http_inspect) LONG HEADER": "Lime",
        "(http_inspect) UNESCAPED SPACE IN HTTP URI": "DarkRed",
        "Bad segment, adjusted size <= 0": "Aqua",
        "(http_inspect) TOO MANY PIPELINED REQUESTS": "Gold",
        "(spp_sdf) SDF Combination Alert": "PaleGreen",
        "(http_inspect) INVALID CONTENT-LENGTH OR CHUNK SIZE": "RoyalBlue",
        "(http_inspect) NO CONTENT-LENGTH OR TRANSFER-ENCODING IN HTTP RESPONSE": "Tomato"
      };

      function flyRandom(){
        let rand1 = Math.floor(Math.random() * Math.floor(lenCapitalCities));
        let rand2 = Math.floor(Math.random() * Math.floor(lenCapitalCities));
        let rand1test = rand1 == 226 || rand1 == 227;
        let rand2test = rand2 == 226 || rand2 == 227;
        if(rand1 != rand2 && !rand1test && !rand2test){
          let colorVal = "hsl(" + 360 * Math.random() + ',' +
              (25 + 70 * Math.random()) + '%,' + 
              (50 + 10 * Math.random()) + '%)';
          fly(rand1, rand2, colorVal);
        }
      }

      function flyX(d){
        //data = JSON.parse(d);
        //- console.log(d);
        if(d.src_country == "UNDEFINED")
          d.src_country = defaultCity;
        if(d.dest_country == "UNDEFINED")
          d.dest_country = defaultCity;
        fly(d.src_country, d.dest_country);
        let color = colorAttack[d.alert_message];
        if(!color){
          color = "White";
          //generate random color
          let colorVal = "hsl(" + 360 * Math.random() + ',' +
              (25 + 70 * Math.random()) + '%,' + 
              (50 + 10 * Math.random()) + '%)';
          color = {alert_message: d.alert_message, color: colorVal};
          colorAttack.push(color);
          // console.log(color);
        }
        fly(d.src_country, d.dest_country, color);
        updateTable(d, color);
      }

      function loaded(countries, capitals) {
        svg.append("g")
          .attr("class", "countries")
          .selectAll("path")
          .data(topojson.feature(countries, countries.objects.countries).features)
          .enter()
          .append("path")
          .attr("d", path);

        svg.append("g")
          .attr("class", "capitals")
          .selectAll("path")
          .data(topojson.feature(capitals, capitals.objects.capitals).features)
          .enter()
          .append("path")
          .attr("id", function(d) {return d.id;})
          .attr("d", path);

        let geos = topojson.feature(capitals, capitals.objects.capitals).features;
        for (i in geos) {
          if(useDummy){
            capitalCities[i] = geos[i].geometry.coordinates;
          } else {
            capitalCities[geos[i].properties.country] = geos[i].geometry.coordinates;
          }
        }
        let lenCapitalCities = capitalCities.length;
        // console.log(geos);
        
        
      }
      
      let tableRows = 0, maxRow = 5;
      function updateTable(data, color){

        //insert new row
        $("<tr>"+
          "<td>"+ data.src_ip + "(" + data.src_country + ")" + "</td>"+
          "<td>"+ data.dest_ip + "(" + data.dest_country + ")" +"</td>"+
          "<td style='color:"+ color +";'>"+ data.alert_message +"</td>"+
          "<td>"+ data.value +"</td>"+
          "</tr>")
          .hide().appendTo("#stats").show("slow");

        tableRows++;
        if(tableRows > maxRow || tableRows == 1)
          //remove first row
          $("#stats tr:first").remove();
      }

      $(function() {
        //- queue().defer(d3.json, "../json/countries2.topo.json")
        //-       .defer(d3.json, "../json/capitals.topo.json")
        //-       .await(loaded);
        //ref: https://stackoverflow.com/a/49534634
        var files = ["../json/countries2.topo.json", "../json/capitals.topo.json"];
        var promises = [];
        files.forEach(function(url) {
            promises.push(d3.json(url))
        });

        Promise.all(promises)
          .then(function(values) {
            loaded(values[0], values[1])
          })
          .catch(error => { 
            console.error(error.message)
          });      
              
        //- var width = 938;
        //- var height = 620;
        //- currentWidth = $("#map").width();
        //- console.log(height, width);
        //- svg.attr("width", currentWidth);
        //- svg.attr("height", currentWidth * height / width);
      });

    script.
      var formatDateIntoYear = d3.timeFormat("%H:%M %m/%y");
      var formatDate = d3.timeFormat("%b %Y");
      var parseDate = d3.timeParse("%m-%d-%H");
      var momentDate = function(m, d, h) { return moment().month(m-1).date(d).hour(h).toDate(); };
      var startDate = moment().subtract(1, 'day').toDate(),
        endDate = moment().toDate();
      var margin = { top: 0, right: 50, bottom: 0, left: 30 },
        widthVis = width - margin.left - margin.right,
        heightVis = 100 - margin.top - margin.bottom;
      var vis = d3.select("#vis")
        .append("svg")
        .attr("width", widthVis + margin.left + margin.right)
        .attr("height", heightVis + margin.top + margin.bottom);
      ////////// slider //////////
      var moving = false;
      var currentValue = 0;
      var targetValue = widthVis;
      var playButton = d3.select("#play-button");
      var x, slider, handle, label;
      function initiateSlider(startDate){
        x = d3.scaleTime()
          .domain([startDate, endDate])
          .range([0, targetValue])
          .clamp(true);
        slider = vis.append("g")
          .attr("class", "slider")
          .attr("transform", "translate(" + margin.left + "," + heightVis / 2 + ")");
        slider.append("line")
          .attr("class", "track")
          .attr("x1", x.range()[0])
          .attr("x2", x.range()[1])
          .select(function () { return this.parentNode.appendChild(this.cloneNode(true)); })
          .attr("class", "track-inset")
          .select(function () { return this.parentNode.appendChild(this.cloneNode(true)); })
          .attr("class", "track-overlay")
          .call(d3.drag()
            .on("start.interrupt", function (){ slider.interrupt(); })
            .on("start drag", function (){
              currentValue = d3.event.x;
              update(x.invert(currentValue));
            })
          );
        slider.insert("g", ".track-overlay")
          .attr("class", "ticks")
          .attr("transform", "translate(0," + 18 + ")")
          .selectAll("text")
          .data(x.ticks(10))
          .enter()
          .append("text")
          .style("fill", "#fff")
          .attr("x", x)
          .attr("y", 10)
          .attr("text-anchor", "middle")
          .text(function (d) { return formatDateIntoYear(d); });
        handle = slider.insert("circle", ".track-overlay")
          .attr("class", "handle")
          .attr("r", 9);
        label = slider.append("text")
          .style("fill", "#fff")
          .attr("class", "label")
          .attr("text-anchor", "middle")
          .text(formatDate(startDate))
          .attr("transform", "translate(0," + (-25) + ")")
      }  
      ////////// plot //////////
      let oldData = 0;
      var dataset;
      d3.json("/json/testFly.json").then(function (data) {
        dataset = data;
        //- console.log(dataset);
        startDate = moment(dataset[0].time).toDate();
        initiateSlider(startDate);
        playButton
          .attr("disabled", null)
          .text("Play")
          .on("click", function () {
            var button = d3.select(this);
            if (button.text() == "Pause") {
              moving = false;
              clearInterval(timer);
              button.text("Play");
            } else {
              moving = true;
              timer = setInterval(step, 250);
              button.text("Pause");
            }
            console.log("Slider moving: " + moving);
          })
      });
      function step() {
        update(x.invert(currentValue));
        currentValue = currentValue + (targetValue / 151);
        //- console.log(currentValue);
        if (currentValue > targetValue) {
          moving = false;
          currentValue = oldData = 0;
          clearInterval(timer); // disable this for endless loop
          update(x.invert(currentValue));
          playButton.text("Play");
          console.log("Slider moving: " + moving);
        }
      }
      function drawPlot(data) {
        flyX(data);
      }
      function update(h) {
        // update handle position and text of label according to slider scale
        handle.attr("cx", x(h));
        label
          .attr("x", x(h))
          .text(formatDate(h));
        // filter data set and redraw plot
        let newData = dataset.filter(function (d) {
          //- let date = momentDate(d._id.month, d._id.day, d._id.hour);
          let date = moment(d.time).toDate();
          //- console.log(date);
          return date < h;
        });

        if(oldData && newData.length == oldData){
          return;
        }
          
        //- console.log(newData);
        let index, goingForward = newData.length > oldData;
        if(goingForward)
          index = oldData - newData.length;
        else
          index = newData.length - oldData;
        
        newData = newData.slice(index);
        //- console.log(`old: ${oldData}, new: ${newData.length}`);
        for(let event of newData){
          drawPlot(event);
        }

        if(goingForward)
          oldData = oldData - index;
        else
          oldData = oldData + index;
      }

      $(function() {
        $(window).resize(function() {
          //- curWidth = $("#vis").width();
          //- curHeight = $("#vis").height();
          //- vis.attr("width", curWidth + margin.left + margin.right);
          //- vis.attr("height", curHeight + margin.top + margin.bottom);
        });
      });