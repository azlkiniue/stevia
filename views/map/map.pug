doctype html
html(lang='en', xmlns:fb='http://ogp.me/ns/fb#')
  head
    meta(http-equiv='content-type', content='text/html;charset=utf-8')
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    meta(name='description', content='This animation uses d3.js geo and SVG transition.')
    link(rel='stylesheet', href='../css/bootstrap.min.css')
    link(rel='stylesheet', href='../css/v4.css')
    link(rel='stylesheet', href='../css/v4gray.css')
    title S T E V I A
    style.
      @media(max-width: 768px) {
        #map {
          margin-top: -100px;
        }
      }

      @media(min-width: 768px) {
        .content {
          margin-top: -300px;
        }
      }
  body
    .header
    .content
      .container-fluid.pl-0.pr-0
        #map
        .fixed-bottom
          .d-flex.justify-content-start
            .col-8
              table.table.table-sm.table-dark
                thead
                  tr
                    th Source
                    th Destination
                    th Alert
                    th Frequency
                tbody.table-borderless#stats
                  tr
                    td.text-center(colspan="3") No Data Available
    .footer
    script(src='../js/jquery.min.js')
    script(src='../js/bootstrap.min.js')
    script(src='../js/d3.v4.min.js')
    script(src='../js/queue.v1.min.js')
    script(src='../js/topojson.v1.min.js')
    script(src='../js/socket.io.js')
    script.
      var useDummy = false;

      var currentWidth = $('#map').width();
      var width = 938;
      var height = 620;

      var projection = d3.geoMercator()
                        .scale(150)
                        .translate([width / 2, height / 1.41]);

      var path = d3.geoPath()
                  .pointRadius(2)
                  .projection(projection);
        
      //ref: https://stackoverflow.com/a/56568406
      var straightline = d3.line()
                          .x(function(d) {
                            return projection([d[0],d[1]])[0];
                          })
                          .y(function(d) {
                            return projection([d[0],d[1]])[1];
                          }); 
      
      var svg = d3.select("#map")
                  .append("svg")
                  .attr("preserveAspectRatio", "xMidYMid")
                  .attr("viewBox", "0 0 " + width + " " + height)
                  .attr("width", currentWidth)
                  .attr("height", currentWidth * height / width);

      if(useDummy){
        var capitalCities = [];
      } else {
        var capitalCities = {};
      }

       function delta(plane, path) {
         let l = path.getTotalLength();
         //let plane = plane;
         return function(i) {
           return function(t) {
            let p = path.getPointAtLength(t * l);

            let t2 = Math.min(t + 0.05, 1);
            let p2 = path.getPointAtLength(t2 * l);

            let x = p2.x - p.x;
            let y = p2.y - p.y;
            let r = 90 - Math.atan2(-y, x) * 180 / Math.PI;

            let s = Math.min(Math.sin(Math.PI * t) * 0.7, 0.3);

            return "translate(" + p.x + "," + p.y + ") scale(" + s + ") rotate(" + r + ")";
          }
        }
      }

      function trailDelta() {
        let l = this.getTotalLength(),
            i = d3.interpolateString("0," + l, l + "," + l);
        return function(t) { return i(t); };
      }

      function transition(route, trail, color) {
        let l = route.node().getTotalLength();
        let duration = l*5;
            
        trail.transition()
            .duration(duration)
            .attrTween("stroke-dasharray", trailDelta)
            .on("end", destinationPulse(route, duration, color))
            .remove();       
      }

      function destinationPulse(route, delayDuration, color){
        let dataCircle = route.datum();
        let pointDestination = projection(dataCircle[1]);
        //- console.log(color);
        svg.append("circle")
          .datum(dataCircle)
          .attr("cx", pointDestination[0])
          .attr("cy", pointDestination[1])
          .attr("r", 0)
          .style("class", "destCircleMouse")
          .style("fill", color)
          .style("fill-opacity", "1")
          .transition()
          .delay(delayDuration)
          .duration(100)
          .attr("r", "3px")
          .on("end", function (d) {
            d3.select(this)
              .transition()
              .duration(500)
              .attr("r", 10) // circle radius end
              .style("fill-opacity", "0")
              .on("end", function() { 
                this.remove(); 
              })
          });

          route.remove();
      }

      function fly(origin, destination, color) {
        //- console.log(color)
        //ref: https://stackoverflow.com/a/56568406
        let route = svg.append("path")
                      .datum([capitalCities[origin], capitalCities[destination]])
                      .attr("class", "route")
                      .attr("d", straightline);

        let trail = svg.append("path")
                      .datum([capitalCities[origin], capitalCities[destination]])
                      .attr("d", straightline)
                      .style("stroke-width", 1.5)
                      .style("stroke", color);

        transition(route, trail, color);
      }

      function loaded(error, countries, airports) {
        svg.append("g")
          .attr("class", "countries")
          .selectAll("path")
          .data(topojson.feature(countries, countries.objects.countries).features)
          .enter()
          .append("path")
          .attr("d", path);

        svg.append("g")
          .attr("class", "airports")
          .selectAll("path")
          .data(topojson.feature(airports, airports.objects.capitals).features)
          .enter()
          .append("path")
          .attr("id", function(d) {return d.id;})
          .attr("d", path);

        let geos = topojson.feature(airports, airports.objects.capitals).features;
        for (i in geos) {
          if(useDummy){
            capitalCities[i] = geos[i].geometry.coordinates;
          } else {
            capitalCities[geos[i].properties.country] = geos[i].geometry.coordinates;
          }
        }
        let lenCapitalCities = capitalCities.length;
        console.log(geos);
          
        let defaultCountry = "Indonesia";
        let colorAttack = {
          "Consecutive TCP small segments exceeding threshold": "Turquoise",
          "Reset outside window": "Blue",
          "(spp_ssh) Protocol mismatch": "Green",
          "(http_inspect) LONG HEADER": "Lime",
          "(http_inspect) UNESCAPED SPACE IN HTTP URI": "DarkRed",
          "Bad segment, adjusted size <= 0": "Aqua",
          "(http_inspect) TOO MANY PIPELINED REQUESTS": "Gold",
          "(spp_sdf) SDF Combination Alert": "PaleGreen",
          "(http_inspect) INVALID CONTENT-LENGTH OR CHUNK SIZE": "RoyalBlue",
          "(http_inspect) NO CONTENT-LENGTH OR TRANSFER-ENCODING IN HTTP RESPONSE": "Tomato"
        };
        if(useDummy){
          setInterval(function() {
            let rand1 = Math.floor(Math.random() * Math.floor(lenCapitalCities));
            let rand2 = Math.floor(Math.random() * Math.floor(lenCapitalCities));
            let rand1test = rand1 == 226 || rand1 == 227;
            let rand2test = rand2 == 226 || rand2 == 227;
            if(rand1 != rand2 && !rand1test && !rand2test){
              let colorVal = "hsl(" + 360 * Math.random() + ',' +
                  (25 + 70 * Math.random()) + '%,' + 
                  (50 + 10 * Math.random()) + '%)';
              fly(rand1, rand2, colorVal);
            }
          }, 100);
        } else {
          let socket = io();
          socket.on('mongoStream', function (data) {
            let event = data.fullDocument;
            //- console.log(event.src_country, event.dest_country);
            //- console.log(colorAttack);
            if(event.src_country == "UNDEFINED")
              event.src_country = defaultCountry;
            if(event.dest_country == "UNDEFINED")
              event.dest_country = defaultCountry;
            
            
            let color = colorAttack[event.alert_message];
            if(!color){
              color = "White";
              //generate random color
              let colorVal = "hsl(" + 360 * Math.random() + ',' +
                 (25 + 70 * Math.random()) + '%,' + 
                 (50 + 10 * Math.random()) + '%)';
              color = {alert_message: event.alert_message, color: colorVal};
              colorAttack.push(color);
              console.log(color);
            }
            fly(event.src_country, event.dest_country, color);
            updateTable(event, color);
          });
        }
      }

      let tableRows = 0, maxRow = 5;
      function updateTable(data, color){

        //insert new row
        $("<tr>"+
          "<td>"+ data.src_ip + "(" + data.src_country + ")" + "</td>"+
          "<td>"+ data.dest_ip + "(" + data.dest_country + ")" +"</td>"+
          "<td style='color:"+ color +";'>"+ data.alert_message +"</td>"+
          "<td>"+ data.value +"</td>"+
          "</tr>")
          .hide().appendTo("#stats").show("slow");

        tableRows++;
        if(tableRows > maxRow || tableRows == 1)
          //remove first row
          $("#stats tr:first").remove();
      }
      
      $(function() {
        queue().defer(d3.json, "../json/countries2.topo.json")
              .defer(d3.json, "../json/capitals.topo.json")
              .await(loaded);

        $(window).resize(function() {
          currentWidth = $("#map").width();
          svg.attr("width", currentWidth);
          svg.attr("height", currentWidth * height / width);
        });
      });

